package com.example.teacher.glad;

import android.app.Activity;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Display;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class MainActivity extends Activity {
    File file = new File("/data/data/com.example.teacher.glad/clicker.txt");
    Scanner scanner = null;
    static int counter = 0;
    public int width_img = 400;
    public int height_img = 400;
    public int minHeight;
    public int width, height;
    int time_score = 0;
    ImageView img = null;
    TextView score;
    TextView time;
    Timescore timescore = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        time = findViewById(R.id.time);
        final TextView score = findViewById(R.id.Score);
        final ImageView img = findViewById(R.id.img);
        BufferedReader br = null;
        try {
            FileReader fr = new FileReader(file);
            br = new BufferedReader(fr);
        } catch (Exception e) {
            Log.e("neption", "FileNotFoundException");
        }
        if (file.exists()) {
            try {
                counter = br.read();
            } catch (IOException e) {
                Log.d("neption", "br");
            }

            Log.d("neption", "counter = scanner.nextInt();");
        } else {
            try {
                file.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
                Log.d("neption", "createNewFile");
            }
        }
        timescore = new Timescore();
        timescore.execute();
        img.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                img.setImageResource(R.mipmap.ubuntu);
                counter++;
                score.setText("Score: " + String.valueOf(counter));
                WindowManager windowManager = getWindowManager();
                Display display = windowManager.getDefaultDisplay();
                Random random = new Random();
                width = display.getWidth();
                height = display.getHeight();
                img.setX(random.nextInt(width - width_img));
                minHeight = random.nextInt(height - height_img);
                if (minHeight <= 250) {
                    img.setY(250);
                } else
                    img.setY(minHeight);


            }
        });
        Button reset = findViewById(R.id.reset);
        reset.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                counter = 0;
                score.setText("Score: 0");
            }
        });
        ;
    }

    @Override
    protected void onPause() {
        super.onPause();
        Log.d("neption", "onPause");
        FileWriter fw = null;
        try {
            fw = new FileWriter("/data/data/com.example.teacher.glad/clicker.txt");
            fw.write(counter);
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();

        } finally {
            try {
                fw.close();
            } catch (Exception e) {
                Log.d("neption", "fw do not close");
            }
            timescore.cancel(true);
        }
    }

    @Override
    protected void onRestart() {
        super.onRestart();
        timescore = new Timescore();
        timescore.execute();
    }

    private class Timescore extends AsyncTask<String, String, String> {

        @Override
        protected String doInBackground(String... strings) {
            while (!isCancelled()) {
                time_score++;
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                publishProgress(String.valueOf(time_score));
                }
            return null;
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);
            time.setText("Time: " + String.valueOf(time_score));
        }

    }
}
